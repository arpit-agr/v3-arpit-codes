---
import Layout from '../layouts/Layout.astro';
import {findMatchingItem} from '../utils/findMatchingItem.js';
import pageData from '../data/pages.json';
import HeroSection from '../components/HeroSection.astro';
import {getCollection} from 'astro:content';
import ExternalLinkVector from '../components/ExternalLinkVector.astro';

const pageInfo = findMatchingItem(Astro.url.pathname, pageData);
const pageTitle = pageInfo.title;
const pageDesc = pageInfo.description;
const allDesignPrinciples = await getCollection('designPrinciples', ({data}) => {
	if (import.meta.env.PROD) {
		return data.draft !== true;
	} else {
		return data;
	}
});
---

<Layout title={pageTitle} description={pageDesc}>
	<main id="main">
		<HeroSection>
			<h1>{pageTitle}</h1>
			<p class="text-balance">{pageDesc}</p>
		</HeroSection>
		<article class="flow region wrapper">
			<dl class="design-principles-list grid" role="list">
				{
					allDesignPrinciples.map(async entry => {
						const {Content} = await entry.render();
						const origin = entry.data.origin;
						const authorData = entry.data.author;

						return (
							<div
								class="principle-entry grid"
								{...(entry.data.draft && {style: {color: 'var(--color-draft)'}})}
							>
								<dt class="font-medium text-color-2 relative">
									<a class="relative grid no-underline" href={entry.data.url}>
										<span>{entry.data.title}</span>
										<ExternalLinkVector />
									</a>
								</dt>
								<dd class="principle-description text-pretty">
									{entry.data.description}
								</dd>
								<dd class="principle-content flow flow-space-xs">
									<Content />
								</dd>
								{(origin || authorData) && (
									<dd class="principle-citation">
										<cite class="block text-step-000 leading-snug tracking-wide uppercase text-balance">
											{origin && (
												<>
													<span class="visually-hidden">Published in</span> {origin}
												</>
											)}
											{origin && authorData && ' by'}
											{authorData &&
												authorData.map((item, index) => {
													if (index + 1 < authorData.length) {
														return `${item}, `;
													} else {
														return `${item}`;
													}
												})}
										</cite>
									</dd>
								)}
							</div>
						);
					})
				}
			</dl>
		</article>
	</main>
</Layout>
