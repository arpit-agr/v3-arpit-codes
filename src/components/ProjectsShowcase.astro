---
import projects from '../data/projects.json';
import ProjectMockup from './ProjectMockup.astro';
import ChevronRightVector from './ChevronRightVector.astro';
import ChevronLeftVector from './ChevronLeftVector.astro';

const projectsLength = projects.length;
---

<project-showcase>
	<div class="projects-scroll-container">
		<ul class="project-list" role="list">
			{
				projects.map((project, index) => {
					return (
						<li class="project-item">
							<div class="project-item-header small-text leading-flat">
								<a class="project-link" href={project.url}>
									<span class="project-title">{project.title}</span>
									<span class="visually-hidden">project site</span>
								</a>
								<span class="project-index tiny-text" aria-hidden="true">
									{index + 1} ‚ÅÑ {projectsLength}
								</span>
							</div>
							<ProjectMockup
								imagePath={`/src/images/projects/${project.image}`}
							/>
						</li>
					);
				})
			}
		</ul>
	</div>
	<div class="project-showcase-controls cluster wrapper">
		<button
			class="btn"
			data-direction="prev"
			data-btn="secondary"
			aria-label="Previous"
		>
			<ChevronLeftVector />
		</button>
		<button
			class="btn"
			data-direction="next"
			data-btn="secondary"
			aria-label="Next"
		>
			<ChevronRightVector />
		</button>
	</div>
</project-showcase>

<script>
	// @ts-nocheck

	// Snappy Carousel with Smooth Scroll
	// This script enables smooth horizontal scrolling for a carousel of items with forward and backward navigation buttons. It also respects users' reduced motion preferences and dynamically updates button states based on the scroll position.

	// Define the behaviour for our new type of HTML element.
	class ProjectShowcase extends HTMLElement {
		constructor() {
			super();

			// Grab the scroller containing the items
			const showcaseScroller = this.querySelector('.projects-scroll-container');

			// Get all items
			const showcaseItems = showcaseScroller.querySelectorAll('li');

			// Get the last item
			const lastItem = showcaseItems[showcaseItems.length - 1];

			// Find out the width of one item in the scroller (assuming all items have the same width)
			const showcaseItemSize = showcaseItems[0].getBoundingClientRect().width;

			// Get the controls container and the individual prev/next buttons
			const prevButton = this.querySelector('[data-direction="prev"]');
			const nextButton = this.querySelector('[data-direction="next"]');

			// Check for reduced motion preference
			const prefersReducedMotion = window.matchMedia(
				'(prefers-reduced-motion: reduce)'
			).matches;

			// Set up click event listeners for the prev/next buttons to handle scrolling
			nextButton.addEventListener('click', scrollToNextItem);
			prevButton.addEventListener('click', scrollToPrevItem);

			// Scroll to the next item in the scroller
			function scrollToNextItem(event) {
				if (nextButton.getAttribute('aria-disabled') === 'true') {
					event.preventDefault();
					return;
				}
				showcaseScroller.scrollTo({
					left: showcaseScroller.scrollLeft + showcaseItemSize,
					behavior: prefersReducedMotion ? 'auto' : 'smooth'
				});
			}

			// Scroll to the previous item in the scroller
			function scrollToPrevItem(event) {
				if (prevButton.getAttribute('aria-disabled') === 'true') {
					event.preventDefault();
					return;
				}
				showcaseScroller.scrollTo({
					left: showcaseScroller.scrollLeft - showcaseItemSize,
					behavior: prefersReducedMotion ? 'auto' : 'smooth'
				});
			}

			// Check if an element is fully visible within its container
			function isFullyVisible(element, container) {
				const elementRect = element.getBoundingClientRect();
				const containerRect = container.getBoundingClientRect();

				return (
					elementRect.left >= containerRect.left &&
					elementRect.right <= containerRect.right
				);
			}

			// Update the state of the prev/next buttons based on the scroll position
			function updateButtonState() {
				// Disable the prev button if we're at the start
				const scrollerAtStart = showcaseScroller.scrollLeft === 0;
				if (scrollerAtStart) {
					prevButton.setAttribute('aria-disabled', 'true');
				} else {
					prevButton.removeAttribute('aria-disabled');
				}

				// Disable the next button if the last item is fully visible
				const lastItemFullyVisible = isFullyVisible(lastItem, showcaseScroller);
				if (lastItemFullyVisible) {
					nextButton.setAttribute('aria-disabled', 'true');
				} else {
					nextButton.removeAttribute('aria-disabled');
				}
			}

			// Initial check to set the correct button state when the page loads
			updateButtonState();

			// Update button state after each scroll event
			showcaseScroller.addEventListener('scroll', updateButtonState);

			// Debounce function to optimize performance
			function debounce(func, wait) {
				let timeout;
				return function (...args) {
					clearTimeout(timeout);
					timeout = setTimeout(() => {
						func.apply(this, args);
					}, wait);
				};
			}

			// Create a debounced version of updateButtonState
			const debouncedUpdateButtonState = debounce(updateButtonState, 200);

			// Update button state when window is resized
			window.addEventListener('resize', debouncedUpdateButtonState);
		}
	}

	// Tell the browser to use our ProjectShowcase class for <project-showcase> elements.
	customElements.define('project-showcase', ProjectShowcase);
</script>
